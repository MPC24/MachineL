train <- read.csv("/pml-traing.csv", header=TRUE, stringAsFactors=FALSE)
train <- read.csv("/pml-traing.csv", header=TRUE, stringsAsFactors=FALSE)
train <- read.csv("pml-traing.csv", header=TRUE, stringsAsFactors=FALSE)
train <- read.csv(paste(getwd(), "pml-traing.csv", sep="/"), header=TRUE, stringsAsFactors=FALSE)
list()
?list
list(getwd())
train <- read.csv(paste(getwd(), "pml-training.csv", sep="/"), header=TRUE, stringsAsFactors=FALSE)
tescsv <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
download.file(tescsv, destfile=paste(getwd(), "pml-testing.csv", sep="/"))
test <- read.csv(paste(getwd(), "pml-testing.csv", sep="/"), header=TRUE, stringsAsFactors=FALSE)
View(train)
tapply(test, class)
sapply(test, class)
head(test)
head(test$classe)
train <- read.csv(paste(getwd(), "pml-training.csv", sep="/"), header=TRUE)
head(train)
sapply(test, class)
class(train$class)
head(test)
test <- read.csv(paste(getwd(), "pml-testing.csv", sep="/"), header=TRUE)
head(test)
names(test)
names(train)
View(train)
table(train$user_name)
table(train$cvtd_timestamp)
?table
table(train$user_name,train$cvtd_timestamp)
table(train$cvtd_timestamp, train$user_name)
sum(is.na(train$roll_belt))
sapply(train, function(x) sum(is.na(x)))
sum(is.na(train$amplitude_roll_belt))
table(sapply(train, function(x) sum(is.na(x))))
str(train)
library(caret)
inTrain <- createDataPartition(y=train$classe, p=0.60, list=FALSE)
training <- train[inTrain,]
testing <- train[-inTrain,]
tr <- training[,sapply(train, function(x) sum(is.na(x))) > 0]
View(tr)
tr <- training[,sapply(train, function(x) sum(is.na(x))) < 0]
tr <- training[,sapply(train, function(x) sum(is.na(x))) == 0]
?arr.ind
??arr.ind
M <- abs(cor(tr[,-classe]))
diag(M) <- 0
which(M > 0.8, arr)
View(tr)
name(tr)
names(tr)
M <- abs(cor(tr[,-classe]))
M <- abs(cor(tr[,-93]))
?is.null
sapply(train, function(x) sum(is.null(x)))
head(tr$kurtosis_roll_belt)
?is.numberic
?is.numeric
sapply(train, function(x) sum(is.numeric(x)))
is.empty
sapply(train, function(x) sum(missing(x)))
head(tr$kurtosis_picth_belt)
?preProcess
pptr <- preProcess(tr[,93], method="pca")
class(tr)
pptr <- preProcess(tr[,-93], method="pca")
pptr <- preProcess(tr[,is.numeric()], method="pca")
pptr <- preProcess(tr[,is.numeric(tr)], method="pca")
sapply(train, function(x) is.numeric(x))
pptr <- sapply(train, function(x) is.numeric(x))
pptr <- tr[,sapply(train, function(x) is.numeric(x))]
pptr <- tr[,sapply(train, function(x) is.numeric(x))==TRUE]
nu <- sapply(train, function(x) is.numeric(x))==TRUE
nu
pptr <- tr[,nu]
names(nu)
pptr <- tr[sapply(tr, is.numeric),]
View(pptr)
class(pptr)
sapply(pptr,class)
pptr <- tr[apply(tr[is.numeric],2,all),]
pptr <- tr[,is.numeric]
tr[Reduce(`&`, tr[sapply(df2, is.numeric)]),]
tr[Reduce(`&`, tr[sapply(tr, is.numeric)]),]
pptr <- tr[Reduce(`&`, tr[sapply(tr, is.numeric)]),]
View(pptr)
pptr <- tr[,sapply(tr,class)=="numeric"]
View(pptr)
sapply(tr,class)
names(tr)
View(pptr)
pptr <- preProcess(pptr, method="pca")
head(pptr)
pptr
names(pptr)
pptrain <- predict(pptr, tr[,-93])
ntr <- tr[,sapply(tr,class)=="numeric"]
pptrain <- predict(pptr, ntr)
ntr$classe <- tr$classe
pptrain <- predict(pptr, ntr[-"classe"])
View(ntr)
pptrain <- predict(pptr, ntr[,-28])
trMod <- train(ntr[,28] ~ ., method="rf", data=ntr)
ntr[,28]
head(testing[,160])
mpretest <- (pptr, testing[-160])
mpretest <- predict(pptr, testing[-160])
nte <- testing[,sapply(testing,class)=="numeric"]
te <- testing[,sapply(testing, function(x) sum(is.na(x))) == 0]
nte <- te[,sapply(te,class)=="numeric"]
nte$classe <- te$classe
View(nte)
ppte <- predict(pptr, nte[-28])
confusionMatrix(nte[,28],predict(trMod,ppte))
View(nte)
trMod$coef
View(ppte)
pptr$coef
ppte <- predict(trMod, nte)
confusionMatrix(nte[,28], ppte)
ppte <- predict(trMod, testing)
confusionMatrix(testing[,160],ppte)
finalTest <- predict(trMod, test)
trMod$coef
trMod$pred
trMod
head(test)
View(test)
names(test)
finalTest <- predict(trMod, test)
test$classe <- test$classe
finalTest <- predict(trMod, test)
finalnte <- test[,sapply(test, function(x) sum(is.na(x))) == 0]
finalnte <- finalnte[,sapply(finalnte,class)=="numeric"]
View(test)
names(test)
test$classe <- test$classe
head(ppte)
?predict.train
predict.train(trMod, newdata=test)
?rep
classe <- as.factor(rep("A",20))
classe
test <- cbind(test,classe)
predict.train(trMod, newdata=test)
test$classe <- 0
View(test)
head(test$classe)
predict.train(trMod, newdata=test)
test$classe <- as.factor(Z)
test$classe <- as.factor("Z")
class(test$classe)
predict.train(trMod, newdata=test)
test$classe <- as.factor("B")
predict.train(trMod, newdata=test)
trMod
predict(trMod, test)
?confusionMatrix()
library(rattle)
getTree(trMod,1,labelVar=TRUE)
plot(trMod$finalModel, uniform=TRUE, main="Classification Tree")
plot(trMod, uniform=TRUE, main="Classification Tree")
predict(trMod)
rm(test$classe)
test$classe <- NULL
names(test)
test$classe <- as.factor()
?forecast
predict(trMod, newdata=test)
View(test)
names(test)
sum(training$classe == "A")
sum(training$classe == "B")
sum(training$classe == "C")
sum(training$classe == "E")
sum(training$classe == "D")
random forest
?randomForest
preFinal <- predict(trMod, newdata=test)
preFinal
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(preFinal)
pptr$coef
pptr
testing$preFinal <- preFinal
test$preFinal <- preFinal
View(test)
head(test)
subset(train, train$raw_timestamp_part_1  == 1323095002)
t <- subset(train, train$raw_timestamp_part_1  == 1322673067)
View(t)
t$classe
t <- subset(train, train$raw_timestamp_part_1  == 1322673075)
t$classe
View(t)
lmt <- lm(training$classe ~ training$raw_timestamp_part_1)
?lm
lmt <- lm(training$raw_timestamp_part_1 ~ training$classe)
lmt
summary(lmt)
?merge
rpMod <- train(ntr[,28],~ ., method="rpart", data=ntr)
names(ntr)
rpMod <- train(ntr[,28] ~ ., method="rpart", data=ntr)
rpMod
glmMod <- train(ntr[,28] ~ ., method="glm", data=ntr)
glmMod <- train(ntr[,28] ~ .,data=ntr, method="glm", preProcess="pca")
gbmMod <- train(ntr[,28] ~ ., data=ntr, method="gbm, verbose=FALSE")
gbmMod <- train(ntr[,28] ~ ., data=ntr, method="gbm", verbose=FALSE)
gbmMod
plot(gbm$finalModel, uniform=TRUE)
gbm$finalModel
pgbmMod <- predict(testing$classe, gbmMod)
pgbmMod <- predict(gbmMod, testing)
confusionMatrix(testing$classe, pgbMod)
confusionMatrix(testing$classe, pgbmMod)
predict(pgbmMod, test)
predict(pgbmMod, newdata=test)
glmMod <- train(ntr[,28] ~ ., method="glm", data=ntr)
warnings()
predict(gbmMod, newdata=test)
View(test)
names(test)
rm(test$preFinal)
rm(test[,161])
test[,161] <- NULL
predict(gbmMod, newdata=test)
predict(rpMod, newdata=test)
rm(test)
test <- read.csv(paste(getwd(), "pml-testing.csv", sep="/"), header=TRUE)
predict(rpMod, newdata=test)
?resamples
lmMod <- lm(ntr[,28] ~ ., data=ntr)
lmMod
summary(lmMod)
table(ntr$classe)
names(rpMod)
rpMod
rpMod$predictors
summary(rpMod)
predict(trMod, newdata=test)
fitCon <- trainControl(method = "repeatedcv", number = 10, repeats = 10)
gbmMod <- train(ntr[,28] ~ ., method="gbm", data=ntr, trControl = fitCon, verbose=FALSE)
gbmMod
gbmpre <- predict(gbmMod, testing)
rm(lmMod)
rm(lmt)
rm(trMod)
confusionMatrix(testing$classe, gbmpre)
library(caret)
confusionMatrix(testing$classe, gbmpre)
gbmMod
names(training)
tr <- cbind(train[,c(2,3)])
tr <- training[new_window=="yes",]
tr <- training[,new_window=="yes"]
tr <- subset(training, new_window=="yes")
View(tr)
#DIV/0!
sapply(tr, function(x) sum(x == "#DIV/0!")]
sapply(tr, function(x) sum(x == "#DIV/0!"))
tr[, sapply(tr, function(x) sum(x == "#DIV/0!"))==0]
trn <- tr[, sapply(tr, function(x) sum(x == "#DIV/0!"))==0]
View(trn)
?export
tc <- trainControl(method = "cv", number = 4, allowParallel = TRUE,verboseIter = TRUE)
tc <- trainControl(method = "cv", number = 4, allowParallel = TRUE)
ntr <- tr[,sapply(tr,class)=="numeric"]
ntr$user_name <- traing$user_name
ntr$user_name <- training$user_name
ntr <- training[,sapply(training,class)=="numeric"]
ntr$user_name <- training$user_name
ntr$classe <- training$classe
names(ntr)
View(tr)
sntr <- tr[,sapply(tr,class)=="numeric"]
View(sntr)
names(sntr)
sntr$user_name <- tr$user_name
sntr$classe <- tr$classe
names(sntr)
sntrMod <- train(sntr[,90] ~ ., method="rf", trControl=tc)
sntrMod <- train(sntr[,90] ~ ., data=sntr,method="rf", trControl=tc)
sntrMod
confusionMatrix(testing$classe, predict(sntrMod, testing))
pr <- predict(sntrMod, testing)
length(pr)
preProcess
?preProcess
ntr
name(ntr)
names(ntr)
predict(sntrMod, test)
pptr
rfPCAMod <- train(ntr[,90] ~ ., data=pptr, method="rf", trControl=tc)
trainPPtr <- predict(pptr, ntr[,-90])
View(nte)
nte$user_name <- ntr$user_name
View(pptrain)
pptrainMod <- train(ntr[,90] ~ ., data=pptrain, method=rf, trControl=tc)
class(pptrain)
tc
pptrainMod <- train(ntr[,90] ~ ., data=ntr, method=rf, trControl=tc)
ntrn <- ntr[,sapply(ntr, function(x) sum(is.na(x))) == 0]
names(ntrn)
ntrn$var_accel_arm <- ntr$var_accel_arm
ntrn$var_roll_arm <- ntr$var_roll_arm
pptrainMod <- train(ntrn[,29] ~ ., data=ntrn, method=rf, trControl=tc)
ntr$var_accel_arm <- NULL
ntr$var_roll_arm <- NULL
pptrainMod <- train(ntrn[,29] ~ ., data=ntrn, method=rf, trControl=tc)
View(ntrn)
pptrainMod <- train(ntrn[,29] ~ ., data=ntrn, method=rf, trControl=tc, preProcess="pca")
ntrn$var_accel_arm
ntrn$var_accel_arm <- NULL
ntrn$var_roll_arm <- NULL
pptrainMod <- train(ntrn[,29] ~ ., data=ntrn, method=rf, trControl=tc, preProcess="pca")
View(ntrn)
class(ntr$user_name)
ntrn$var_accel_arm <- training$var_accel_arm
ntrn$var_roll_arm <- training$var_roll_arm
pptrainMod <- train(ntrn[,29] ~ ., data=ntrn, method="rf", trControl=tc, preProcess="pca")
ntrn$var_accel_arm <- NULL
ntrn$var_roll_arm <- NULL
pptrainMod <- train(ntrn[,29] ~ ., data=ntrn, method="rf", trControl=tc, preProcess="pca")
pptrainMod <- train(ntrn[,29] ~ ., data=ntrn, method="rf", trControl=tc)
pptrainMod
predict(pptrainMod, test)
confusionMatrix(testing$classe, predict(pptrain, testing))
confusionMatrix(testing$classe, predict(pptrainMod, testing))
subtrainy <- subset(training, new_window == "yes")
ntr <- training[,sapply(training,class)=="numeric"]
View(ntr)
names(ntr)
names(sntr)
nzv <- nearZeroVar(ntr, saveMetrics = TRUE)
nzv[nzv$nzv,][1:10,]
nzv[nzv$nzv,]
ntr[, -nzv]
nzv
View(nzv)
ntrnz[, nzv==FALSE]
ntr[, nzv==FALSE]
?nearZeroVar
ntr[, nzv[nzv$nzv,]]
class(nzv)
nzv$row.names
pptrain$user_name <- training$user_name
pptrain$classe <- training$classe
pcModrf <- train(pptrain$classe ~ ., data=pptrain, method="rf", trControl=tc)
pcModrf
testPC <- predict(pptr, nte[,-28])
View(testPC)
testPC$user_name <- testing$user_name
testPC$classe <- testing$classe
confusionMatrix(testPC$classe, predict(pcModrf, testPC))
predict(pcModrf, test)
tepp <- test[,sapply(test,class)=="numeric"]
teppp <- preProcess(tepp, method="pca")
tep <- predict(pptr, tepp)
View(testPC)
View(t)
View(ntrn)
nzv <- nearZeroVar(ntrn)
ntrnz <- ntrn[,-nzv]
ntrnz <- ntrn[,nzv]
nzv
nzv <- nearZeroVar(ntr)
ntrnz <- ntr[,-nzv]
View(ntrnz)
ntrcor <- cor(ntrnz)
highCor <- sum(abs(ntrcor[upper.tri(ntrco)]) > 0.99)
highCor <- sum(abs(ntrcor[upper.tri(ntrcor)]) > 0.99)
highCor
highCor <- sum(abs(ntrcor[upper.tri(ntrcor)]) > 0.50)
highCor <- findCorrelation(ntrnz, cutoff = 0.8)
ntrna <- ntrnz[,sapply(ntrnz, function(x) sum(is.na(x))) == 0]
ntrna <- ntrna[,sapply(ntrna, function(x) sum(is.empty(x) == 0))]
?empty
View(ntrna)
ntrna <- ntrna[,sapply(ntrna, function(x) sum(invalid(x) == 0))]
highCor <- findCorrelation(ntrnz, cutoff = 0.8)
?findCorrelation
highCor <- findCorrelation(ntrcor, cutoff = 0.8)
ntrcor <- cor(ntrna)
highCor <- findCorrelation(ntrcor, cutoff = 0.8)
highCor
ntrna <- ntrna[, -highCor]
linc <- findLinearCombos(ntrna)
ntrna <- ntrna[, linc$remove]
linc$remove
View(ntrn)
ntrna <- ntrnz[,sapply(ntrnz, function(x) sum(invalid(x))) == 0]
ntrna <- ntrnz[,sapply(ntrnz, function(x) sum(is.na(x))) == 0]
ntrna <- ntrna[, -highCor]
View(ntrna)
?lm
lmuser <- lm(training$classe ~ training$user_name)
lmuser
summary(lmuser)
?dummyVars
when <- data.frame(time = c("afternoon", "night", "afternoon",
"morning", "morning", "morning",
"morning", "afternoon", "afternoon"),
day = c("Mon", "Mon", "Mon",
"Wed", "Wed", "Fri",
"Sat", "Sat", "Fri"))
mainEffects <- dummyVars(~ day + time, data = when)
mainEfficts
mainEffects
tr <- training
dumtrain <- dummyVars(~ user_name, data=tr)
predict(dumtrain, newdata=tr)
userdum <- predict(dumtrain, newdata=tr)
View(userdum)
names(ntrna)
dumte <- dummyVars(~ user_name, data=test)
userte <- predict(dumte, newdata=test)
View(userte)
ntrna <- cbind(ntrna, userdum)
View(ntrna)
ntrna <- cbind(ntrna, training$classe)
View(ntrna)
highCor <- findCorrelation(ntrcor, cutoff = 0.75)
highCor
highCor <- findCorrelation(ntrcor, cutoff = 0.60)
highCor
highCor <- findCorrelation(ntrcor, cutoff = 0.70)
highCor
?sd
sdn <- sapply(ntrna, sd)
sdn
ntrnafinal <- ntrna[, sapply(ntrna, sd) > 1]
ntrnafinal <- cbind(ntrna, userdum)
View(ntrnafinal)
ntrnafinal <- ntrna[, sapply(ntrna, sd) > 1]
View(ntrnafinal)
ntrnafinal <- cbind(ntrnafinal, userdum)
View(ntrnafinal)
?rename
ntrnafinal <- rename(ntrnafinal, c("training$classe" = "classe"))
library(plyr)
ntrnafinal <- rename(ntrnafinal, c("training$classe" = "classe"))
View(ntrnafinal)
rm(pcModrf)
feModrf <- train(ntrnafinal$classe ~ ., data=ntrnafinal, method="rf", trControl=tc)
feModrf
fintest <- cbind(test,userte)
predict(feModrf$finalModel, fintest)
fintest
feModrf$finalModel
View(ntrnafinal)
names(fintest)!= names(ntrnafinal)
names(fintest) = names(ntrnafinal)
names(fintest) == names(ntrnafinal)
predict(feModrf$finalModel, newdata = fintest)
names(fintest[,152])
names(fintest)
names(test)
fintest <- cbind(test, userte)
names(finetest)
names(fintest)
names(fintest) != names(ntrnafinal)
names(fintest) == names(ntrnafinal)
names(ntrnafinal)
predict(feModrf$finalModel, newdata = fintest)
predict(feModrf, newdata = fintest)
sub <- predict(feModrf, newdata = fintest)
pml_write_files(sub)
library(knitr)
tr <- training[,sapply(training, function(x) sum(is.na(x))) == 0]
sapply(training, function(x) sum(invalid(x)))
install.packages(gtools)
install.packages("gtools")
install.packages("gtools")
library(gtools)
ntr <- tr[,sapply(tr,class)=="numeric"]
View(ntr)
tr <- training[,sapply(training,class)=="numeric"]
tr <- training[,sapply(training, function(x) sum(is.na(x))) == 0]
tr <- tr[,sapply(tr,class)=="numeric"]
plot(ntrcor)
fjdlsqjf <- subset(train, new_window == "yes")
plot(feModrf)
ggplot(feModrf)
qqnorm(feModrf)
plot(feModrf$finalModel, uniform=TRUE)
plot(gbmMod$finalModel)
plot(gbmMod$finalModel, uniform=TRUE)
plot(rpMod)
table(sapply(ntr, sd))
sd <- data.frame(sapply(ntr,sd))
View(sd)
install(car)
library("bestglm", lib.loc="~/R/win-library/3.1")
detach("package:caret", unload=TRUE)
library("caret", lib.loc="~/R/win-library/3.1")
rm(finalnte, fintest, fjdlsqjf)
rm(inTrain, nte, ntrn)
rm(ntrna, ntrnz,pptrain,sd,sntr,subtrainy,t,te,tepp)
rm(classe, fitCon, gbmMod, gbmpre, linc,lmuser)
rm(mainEffects,nu,pgbmMod)
rm(pptr,pptrainMod,pr,preFinal)
rm(rpMod, sdn, sub)
rm(teppp)
